<launch>
    <arg name="world_file"  default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>

    <arg name="base"         value="$(optenv ROBOT_BASE kobuki)"/> <!-- create, roomba -->
    <arg name="battery"      value="$(optenv ROBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
    <arg name="gui"          default="true"/>
    <arg name="stacks"       value="$(optenv ROBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
    <arg name="laser_sensor" value="$(optenv ROBOT_LASER_SENSOR velodyne_kinect)"/>  <!-- laser, hokuyo lidar -->
    <arg name="3d_sensor"    value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

    <arg name="pose_initial_x" default="1.0"/>
    <arg name="pose_initial_y" default="1.0"/>
    <arg name="pose_initial_theta" default="0.0"/>

    <include file="$(find robot_gazebo)/launch/empty_world.launch">
        <arg name="use_sim_time" value="true"/>
        <arg name="debug" value="false"/>
        <arg name="gui" value="$(arg gui)" />
        <arg name="world_name" value="$(arg world_file)"/>
    </include>

    <!-- Place gazebo frame at map frame -->

    <arg name="robot_1"  default="kobuki_1"/>
    <arg name="robot_2" default="kobuki_2"/>
    <arg name="robot_3"  default="kobuki_3"/>
    
    <!-- <group ns = "$(arg robot_1)">
        <node pkg="tf" type="static_transform_publisher" name="gazebo_map_broadcaster" args="0 0 0 0 0 0  odom base_footprint 10"/>
        
        <node name="odom_tf_converter" pkg="robot_gazebo" type="odom_tf_converter">
            <param name="pfi" value="/map"/>
            <param name="cfi" value="/odom"/>
        </node>

        <include file="$(find robot_gazebo)/launch/includes/$(arg base).launch.xml">
            <arg name="base" value="$(arg base)"/>
            <arg name="stacks" value="$(arg stacks)"/>
            <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
            <arg name="laser_sensor" value="$(arg laser_sensor)"/>
            <arg name="mobile_base" default="mobile_base"/>
            <arg name="initial_pose" value="-x $(arg pose_initial_x) -y $(arg pose_initial_y) -z $(arg pose_initial_theta)"/>
        </include>

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" type="double" value="100.0" />
        </node>
    </group> -->

    <group ns = "$(arg robot_1)">
        <node pkg="tf" type="static_transform_publisher" name="gazebo_map_broadcaster" args="0 0 0 0 0 0 $(arg robot_1)/odom $(arg robot_1)/base_footprint 10"/> 
        
        <node name="odom_tf_converter" pkg="robot_gazebo" type="odom_tf_converter">
            <param name="pfi" value="/map"/>
            <param name="cfi" value="/$(arg robot_1)/odom"/>
            <remap from="/tracker" to="/$(arg robot_1)/tracker"/>
        </node>

        <include file="$(find robot_gazebo)/launch/includes/$(arg base).launch.xml">
            <arg name="base" value="$(arg base)"/>
            <arg name="stacks" value="$(arg stacks)"/>
            <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
            <arg name="laser_sensor" value="$(arg laser_sensor)"/>
            <arg name="initial_pose" value="-x $(arg pose_initial_x) -y $(arg pose_initial_y) -z $(arg pose_initial_theta)"/>
            <arg name="mobile_base" default="mobile_base"/>
            
            <remap from="velodyne_points" to="/$(arg robot_1)/velodyne_points"/>
            <remap from="tracker" to="/$(arg robot_1)/tracker"/>

        </include>

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" type="double" value="100.0" />
            <param name="tf_prefix" value="$(arg robot_1)" />
        </node>
    </group>


    <!-- spawn surveillance camera -->

    <arg name="camera_1"  default="realsense_1"/>
    <arg name="camera_2" default="realsense_2"/>
    <arg name="camera_3"  default="realsense_3"/>

    <group ns = "$(arg camera_1)">

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
                <param name="publish_frequency" type="double" value="30.0" />
        </node>

        <node name="odom_tf_converter" pkg="robot_gazebo" type="odom_tf_converter">
            <param name="pfi" value="/map"/>
            <param name="cfi" value="$(arg camera_1)/base_link"/>
            <remap from="/tracker" to="/$(arg camera_1)/tracker"/>
        </node>

        <arg name="model" default="$(find realsense2_description)/urdf/test_d435_camera.urdf.xacro"/>
        <arg name="name" default="$(arg camera_1)" />
        <arg name="topics_ns" default="$(arg camera_1)" />
        <arg name="add_plug" default="false" />
        <arg name="publish_pointcloud" default="true"/>
        <arg name="base_link" default="$(arg camera_1)/base_link"/>
        <arg name="robot_model" default="$(arg camera_1)"/>

        <!-- robot description to load in rviz or gazebo -->
        <param name="robot_description" command="$(find xacro)/xacro $(arg model) use_nominal_extrinsics:=true 
            publish_pointcloud:=$(arg publish_pointcloud) add_plug:=$(arg add_plug) name:=$(arg name) topics_ns:=$(arg topics_ns) base_link:=$(arg base_link)" />

        <!-- push robot_description to factory and spawn robot in gazebo -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
            args="-z 1.0 -unpause -urdf -model $(arg robot_model) -param robot_description" respawn="false" output="screen" /> 

    </group>

    <group ns = "$(arg camera_2)">

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" type="double" value="30.0" />
        </node>

        <node name="odom_tf_converter" pkg="robot_gazebo" type="odom_tf_converter">
            <param name="pfi" value="/map"/>
            <param name="cfi" value="$(arg camera_2)/base_link"/>
            <remap from="/tracker" to="/$(arg camera_2)/tracker"/>
        </node>

        <arg name="model" default="$(find realsense2_description)/urdf/test_d435_camera.urdf.xacro"/>
        <arg name="name" default="$(arg camera_2)" />
        <arg name="topics_ns" default="$(arg camera_2)" />
        <arg name="add_plug" default="false" />
        <arg name="publish_pointcloud" default="true"/>
        <arg name="base_link" default="$(arg camera_2)/base_link"/>
        <arg name="robot_model" default="$(arg camera_2)"/>

        <!-- robot description to load in rviz or gazebo -->
        <param name="robot_description" command="$(find xacro)/xacro $(arg model) use_nominal_extrinsics:=true 
            publish_pointcloud:=$(arg publish_pointcloud) add_plug:=$(arg add_plug) name:=$(arg name) topics_ns:=$(arg topics_ns) base_link:=$(arg base_link)" />

        <!-- push robot_description to factory and spawn robot in gazebo -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
            args="-z 1.0 -unpause -urdf -model $(arg robot_model) -param robot_description" respawn="false" output="screen" />

    </group>

    <group ns = "$(arg camera_3)">

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
                <param name="publish_frequency" type="double" value="30.0" />
        </node>
        
        <node name="odom_tf_converter" pkg="robot_gazebo" type="odom_tf_converter">
            <param name="pfi" value="/map"/>
            <param name="cfi" value="$(arg camera_3)/base_link"/>
            <remap from="/tracker" to="/$(arg camera_3)/tracker"/>
        </node>

        <arg name="model" default="$(find realsense2_description)/urdf/test_d435_camera.urdf.xacro"/>
        <arg name="name" default="$(arg camera_3)" />
        <arg name="topics_ns" default="$(arg camera_3)" />
        <arg name="add_plug" default="false" />
        <arg name="publish_pointcloud" default="true"/>
        <arg name="base_link" default="$(arg camera_3)/base_link"/>
        <arg name="robot_model" default="$(arg camera_3)"/>

        <!-- robot description to load in rviz or gazebo -->
        <param name="robot_description" command="$(find xacro)/xacro $(arg model) use_nominal_extrinsics:=true 
            publish_pointcloud:=$(arg publish_pointcloud) add_plug:=$(arg add_plug) name:=$(arg name) topics_ns:=$(arg topics_ns) base_link:=$(arg base_link)" />

        <!-- push robot_description to factory and spawn robot in gazebo -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
            args="-z 1.0 -unpause -urdf -model $(arg robot_model) -param robot_description" respawn="false" output="screen" />

    </group>


    <!-- Fake laser -->
    <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
        <param name="scan_height" value="10"/>
        <param name="output_frame_id" value="/camera_depth_frame"/>
        <param name="range_min" value="0.45"/>
        <remap from="image" to="/camera/depth/image_raw"/>
        <remap from="scan" to="/fake/scan"/>
    </node>
    
    <node pkg="turtlebot_teleop" type="turtlebot_teleop_key" name="turtlebot_teleop_keyboard"  output="screen" >
        <param name="scale_linear" value="2.0" type="double"/>
        <param name="scale_angular" value="3.0" type="double"/>
        <remap from="turtlebot_teleop_keyboard/cmd_vel" to="cmd_vel_mux/input/teleop"/>
    </node>


    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find robot_gazebo)/rviz/single_robot.rviz"/>

</launch>
